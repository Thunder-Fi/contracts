{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/ThunderFi.sol": {
      "content": "// Author : br0wnD3v\n// ThunderFi : Invoicing protocol built for the Arbitrum ecosystem.\n\n//SPDX-License-Identifier:MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nstruct Agreement {\n    uint status;\n    string agreementURL; //  ipfs://QmXeDSDdqSgxKZx6g62vJ4pD6AmbWWbzFNpdG9KdJXJggj\n    address paymentToken;\n    uint amount; // 500, 50,1000 etc\n    uint creationTimestamp;\n    uint expiryTimestamp;\n    address seller; // The one issuing the invoice.\n    address purchaser; // The one receiving the invoice.\n}\n\nerror ThunderFi_UserInvalid();\nerror ThunderFi_AgreementIdInvalid();\nerror ThunderFi_CallerNotTheSeller();\nerror ThunderFi_CallerNotThePurchaser();\nerror ThunderFi_InsufficientApproval();\n\ncontract ThunderFi is Context, Ownable {\n    uint private idCounter = 1;\n    string public baseURI = \"https://gateway.lighthouse.storage/ipfs/\";\n\n    IERC20 public immutable TXN_TOKEN;\n    uint public immutable PLATFORM_FEE;\n\n    mapping(uint => Agreement) public agreements;\n    // [seller, purchaser]\n    mapping(uint => address[2]) private agreeementToPartiesInvolved;\n    mapping(address => bool) public whitelisted;\n\n    /// @dev STATUS -\n    //  0 : Inactive\n    //  1 : Created\n    //  2 : Rescinded\n    //  3 : Rejected\n    //  4 : Settled\n    event AgreementStatusUpdate(\n        address indexed seller,\n        address indexed purchaser,\n        uint timestamp,\n        uint status\n    );\n\n    constructor(address _txnToken, uint _decimals) Ownable(_msgSender()) {\n        TXN_TOKEN = IERC20(_txnToken);\n        // USDC, fee = 0.1 USDC\n        PLATFORM_FEE = 10 ** _decimals / 10;\n    }\n\n    modifier isWhitelisted(address _user) {\n        if (whitelisted[_user]) revert ThunderFi_UserInvalid();\n        _;\n    }\n\n    modifier isSeller(uint _id, address _user) {\n        if (agreeementToPartiesInvolved[_id][0] != _user)\n            revert ThunderFi_CallerNotTheSeller();\n        _;\n    }\n    modifier isPurchaser(uint _id, address _user) {\n        if (agreeementToPartiesInvolved[_id][1] != _user)\n            revert ThunderFi_CallerNotThePurchaser();\n        _;\n    }\n\n    modifier validAgreement(uint _id) {\n        if (_id >= idCounter) revert ThunderFi_AgreementIdInvalid();\n        _;\n    }\n\n    function init() public {\n        whitelisted[_msgSender()] = true;\n    }\n\n    function createAgreement(\n        string memory _agreementCID,\n        address _purchaser,\n        address _paymentToken,\n        uint _amount,\n        uint _expiry\n    ) external isWhitelisted(_msgSender()) {\n        if (TXN_TOKEN.allowance(_msgSender(), address(this)) != PLATFORM_FEE)\n            revert ThunderFi_InsufficientApproval();\n\n        TXN_TOKEN.transferFrom(_msgSender(), address(this), PLATFORM_FEE);\n\n        uint idToSet = idCounter;\n\n        Agreement memory agreementObject = Agreement(\n            1,\n            _agreementCID,\n            _paymentToken,\n            _amount,\n            block.timestamp,\n            _expiry,\n            _msgSender(),\n            _purchaser\n        );\n\n        agreements[idToSet] = agreementObject;\n        agreeementToPartiesInvolved[idToSet] = [_msgSender(), _purchaser];\n\n        ++idCounter;\n\n        emit AgreementStatusUpdate(\n            _msgSender(),\n            _purchaser,\n            block.timestamp,\n            1\n        );\n    }\n\n    function rescindAgreement(\n        uint _id\n    ) external validAgreement(_id) isSeller(_id, _msgSender()) {\n        Agreement storage agreementObject = agreements[_id];\n        address toEmitPurchaser = agreementObject.purchaser;\n\n        agreementObject.status = 2;\n        agreementObject.agreementURL = \"\";\n        agreementObject.paymentToken = address(0);\n        agreementObject.amount = 0;\n        agreementObject.expiryTimestamp = 2 ** 256 - 1;\n        agreementObject.seller = address(0);\n        agreementObject.purchaser = address(0);\n\n        agreeementToPartiesInvolved[_id] = [address(0), address(0)];\n\n        emit AgreementStatusUpdate(\n            _msgSender(),\n            toEmitPurchaser,\n            block.timestamp,\n            2\n        );\n    }\n\n    function rejectAgreement(uint _id) external isPurchaser(_id, _msgSender()) {\n        Agreement storage agreementObject = agreements[_id];\n        address toEmitSeller = agreementObject.seller;\n\n        agreementObject.status = 3;\n        agreementObject.agreementURL = \"\";\n        agreementObject.paymentToken = address(0);\n        agreementObject.amount = 0;\n        agreementObject.expiryTimestamp = 2 ** 256 - 1;\n        agreementObject.seller = address(0);\n        agreementObject.purchaser = address(0);\n\n        agreeementToPartiesInvolved[_id] = [address(0), address(0)];\n\n        emit AgreementStatusUpdate(\n            toEmitSeller,\n            _msgSender(),\n            block.timestamp,\n            3\n        );\n    }\n\n    /// During settlement, a fee of 0.01% of the owed amount is deducted.\n    function settleAgreement(uint _id) external isPurchaser(_id, _msgSender()) {\n        Agreement storage agreementObject = agreements[_id];\n\n        address _seller = agreementObject.seller;\n        uint amount = agreementObject.amount;\n        IERC20 paymentContract = IERC20(agreementObject.paymentToken);\n\n        if (paymentContract.allowance(_msgSender(), address(this)) != amount)\n            revert ThunderFi_InsufficientApproval();\n\n        uint afterDeductionAmount = amount - amount / 10000;\n        TXN_TOKEN.transfer(_seller, afterDeductionAmount);\n\n        agreementObject.status = 4;\n\n        emit AgreementStatusUpdate(_seller, _msgSender(), block.timestamp, 4);\n    }\n\n    // ========\n\n    function getAgreement(\n        uint _id\n    ) external view validAgreement(_id) returns (Agreement memory) {\n        return agreements[_id];\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}